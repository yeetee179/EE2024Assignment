/*****************************************************************************
 *   A demo example using several of the peripherals on the base board
 *
 *   Copyright(C) 2011, EE2024
 *   All rights reserved.
 *
 ******************************************************************************/
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"
#include "Led7seg.h"
#include "joystick.h"
#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"
#include "light.h"
#include "stdio.h"
#include "string.h"
#include "lpc17xx_uart.h"

uint32_t msTick=0; //contains the system time in millisecond
uint32_t previousTime=0;
uint32_t currentTime=0;
////////////////////////////////////////////////////////////////////////////////////////////////
// on every timer interrupt, msTick increases
void SysTick_Handler(void){
	msTick++;
}
//////////////////////////////////////////////////////////////////////////////////////////////
static void init_ssp(void)
{
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPIconnect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);
}
/////////////////////////////////////////////////////////////////////////////////////////////
void Init_All(void){
	//initialise time
	SysTick_Config(SystemCoreClock / 1000 ); //generates a 1 millisec clock
	//initialises the 7 segment
	init_ssp();
	led7seg_init();
}
//causes the led to loop from 0 to F every second
void SevenSeg(void){
	int i =0 ;
    if ( msTick - previousTime) >= 1000){
    	i++;
    }
    if (i>15){
    	i = 0;
    }

    previousTime = msTick;
/////////////////////////////////////////////////////////////////
    static uint32_t i = 0;
      if((msTicks - ledTicks) > 1000){
        if(flag){
          rgb_setLeds(RGB_RED);
        }
        else{
          rgb_setLeds(0x00);
        }
        flag = !flag;

        i++;
        if(i>15) {
          i=0;
        }
        led7seg_setChar(segChars[i], FALSE);

        ledTicks = msTicks;
      }




    printf("%ld \n",(currentTime - previousTime ));

	if(i== 0){led7seg_setChar('0',FALSE);}
	else if(i== 1){led7seg_setChar('1',FALSE);}
	else if(i== 2){led7seg_setChar('2',FALSE);}
	else if(i== 3){led7seg_setChar('3',FALSE);}
	else if(i== 4){led7seg_setChar('4',FALSE);}
	else if(i== 5){led7seg_setChar('5',FALSE);}
	else if(i== 6){led7seg_setChar('6',FALSE);}
	else if(i== 7){led7seg_setChar('7',FALSE);}
	else if(i== 8){led7seg_setChar('8',FALSE);}
	else if(i== 9){led7seg_setChar('9',FALSE);}
	else if(i== 10){led7seg_setChar('A',FALSE);}
	else if(i== 11){led7seg_setChar('B',FALSE);} //B
	else if(i== 12){led7seg_setChar('C',FALSE);}
	else if(i== 13){led7seg_setChar('D',FALSE);} //D
	else if(i== 14){led7seg_setChar('E',FALSE);}
	else if(i== 15){led7seg_setChar('F',FALSE);}
}
//////////////////////////////////////////////////////////////////////////////////////////////
int main(void){
	//initialises everything
	Init_All();

	while(1){
//		printf("Time taken (C version): %ld milliseconds\n",(msTick));
		//7 seg
		SevenSeg();
	}
}

void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
}
