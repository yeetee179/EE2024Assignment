#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"
#include "Led7seg.h"
#include "joystick.h"
#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"
#include "light.h"
#include "stdio.h"
#include "string.h"
#include "lpc17xx_uart.h"
#include <math.h>

#define RGB_CLOCK 333

volatile uint32_t msTick=0; //contains the system time in millisecond
volatile uint32_t previousTimeSevenSeg=0;
volatile uint32_t SevenSegValue = 0;
volatile uint32_t previousTimeOledDisplay = 0;
volatile uint32_t previousTimeToggle = 0;
//////////////////////////////////////////////////////////////////////////////////////////
uint8_t oledLight[40]={};
uint8_t oledTemp[40]={};
uint8_t oledAccX[40]={};
uint8_t oledAccY[40]={};
uint8_t oledAccZ[40]={};
uint8_t oledMonitor[40]={};
uint8_t TEMP_HIGH_WARNING = 20;
uint8_t LIGHT_LOW_WARNING = 50;
volatile uint32_t lightReading = 30;
volatile double tempReading = 0;
int tempCounter = 0;
int32_t xoff = 0;
int32_t yoff = 0;
int32_t zoff = 0;
volatile int8_t xReading = 0;
volatile int8_t yReading = 0;
volatile int8_t zReading = 0;
volatile int32_t xPreviousReading = 0;
volatile int32_t yPreviousReading = 0; //contains the system time in millisecond
volatile int32_t zPreviousReading = 0;
volatile int32_t absoluteAccReading = 0;
volatile uint32_t previousReadingTime=0;

volatile int runningState = 0; //0 is stable, 1 is running

uint8_t uartDataForTransmission[60] = {}; //data that's sent to CEMS
int transmissionCounter = 0 ;//counter for the no. of transmissions
int flagUART = 1;

volatile uint32_t previousBlinkingTime=0;
int lightSensorFlag = 0; // 0 is dont blink, 1 is blink

int RESET_RGB = 0;
int PRESENT_TIME = 0;
int START_RGB_TIME = 0;
int COUNT_RGB = 0;
int red_led = 0;
int blue_led = 0;

int redLedFlag = 0;

void SysTick_Handler(void){
	msTick++;
}
uint32_t getTicks(void){
    return msTick;
}
static void init_ssp(void)
{
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPIconnect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);
}
static void init_i2c(void)
{
	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);
}
void init_GPIO(void){
	PINSEL_CFG_Type PC;

	PC.Funcnum = 0;
	PC.OpenDrain = 0;
	PC.Pinmode = 0;
	PC.Portnum = 1;
	PC.Pinnum = 31;
	PINSEL_ConfigPin(&PC);
	GPIO_SetDir(1,1<<31,0);//SW4 button is the toggle button

	PC.Portnum = 2;
	PC.Pinnum = 0;
	PINSEL_ConfigPin(&PC);
	GPIO_SetDir(2,1,1);//red led is set as output

	PC.Portnum = 0;
	PC.Pinnum = 26;
	PINSEL_ConfigPin(&PC);
	GPIO_SetDir(0,1<<26,1);//blue led is set as output
}

//uint32_t t1 = 0;
//uint32_t t2 = 0;
//int initial = 0;
//void TemperatureRead(void){
//	if(initial == 0){
//		t1 = getTicks();
//		initial = 1;
//		tempCounter = 0;
//	}
//	if(tempCounter >= 340){
//		t2 = getTicks();
//		initial = 0;
//		if(t2 > t1)
//			t2 = t2 - t1;
//		else
//			t2 = (0xFFFFFFFF - t1 + 1) + t2;
//		t2 = ((1000*t2)/(tempCounter) - 2731);
//		tempReading = t2/10.0;
//	}
//}

void SevenSeg(void){
	if ( (msTick - previousTimeSevenSeg) >= 1000){
		SevenSegValue++;
		if (SevenSegValue>15){
			SevenSegValue = 0;
			flagUART = 1;
		}
//		tempReading = temp_read()/10;
//		lightReading = light_read();
//		acc_read ( &xPreviousReading, &yPreviousReading, &zPreviousReading);
	    previousTimeSevenSeg = msTick;
	}
	if(SevenSegValue == 0){led7seg_setChar('0',FALSE);}
	else if(SevenSegValue == 1){led7seg_setChar('1',FALSE);}
	else if(SevenSegValue == 2){led7seg_setChar('2',FALSE);}
	else if(SevenSegValue == 3){led7seg_setChar('3',FALSE);}
	else if(SevenSegValue == 4){led7seg_setChar('4',FALSE);}
	else if(SevenSegValue == 5){led7seg_setChar('5',FALSE);}
	else if(SevenSegValue == 6){led7seg_setChar('6',FALSE);}
	else if(SevenSegValue == 7){led7seg_setChar('7',FALSE);}
	else if(SevenSegValue == 8){led7seg_setChar('8',FALSE);}
	else if(SevenSegValue == 9){led7seg_setChar('9',FALSE);}
	else if(SevenSegValue == 10){led7seg_setChar('A',FALSE);}
	else if(SevenSegValue == 11){led7seg_setChar('B',FALSE);} //B
	else if(SevenSegValue == 12){led7seg_setChar('C',FALSE);}
	else if(SevenSegValue == 13){led7seg_setChar('D',FALSE);} //D
	else if(SevenSegValue == 14){led7seg_setChar('E',FALSE);}
	else if(SevenSegValue == 15){led7seg_setChar('F',FALSE);}
}
void OledDisplay(uint32_t lightReading,double tempReading,int8_t xReading,int8_t yReading,int8_t zReading){
	sprintf(oledLight,"LUX: %u      ",lightReading);
	sprintf(oledTemp,"TEMP: %2.2f    ",tempReading);
	sprintf(oledAccX, "ACC_X: %d      ",xPreviousReading + xoff);
	sprintf(oledAccY, "ACC_Y: %d      ",yPreviousReading + yoff);
	sprintf(oledAccZ, "ACC_Z: %d      ",zPreviousReading + zoff);
	sprintf(oledMonitor, "MONITOR");
	oled_putString(0,50,(uint8_t *)oledMonitor,OLED_COLOR_WHITE,OLED_COLOR_BLACK);
    if (   (SevenSegValue == 5 )
    	|| (SevenSegValue == 10)
    	|| (SevenSegValue == 15)){
    	oled_putString(0,0,(uint8_t *)oledLight,OLED_COLOR_WHITE,OLED_COLOR_BLACK);
    	oled_putString(0,10,(uint8_t *)oledTemp,OLED_COLOR_WHITE,OLED_COLOR_BLACK);
    	oled_putString(0,20,(uint8_t *)oledAccX,OLED_COLOR_WHITE,OLED_COLOR_BLACK);
    	oled_putString(0,30,(uint8_t *)oledAccY,OLED_COLOR_WHITE,OLED_COLOR_BLACK);
    	oled_putString(0,40,(uint8_t *)oledAccZ,OLED_COLOR_WHITE,OLED_COLOR_BLACK);
    }

}

void EINT3_IRQHandler (void)
{
	if((LPC_GPIOINT -> IO2IntStatF >> 5) & 0x1) { //Light Sensor
		blue_led = 1;
		LPC_GPIOINT -> IO2IntClr = 1<<5;
	}
//	if((LPC_GPIOINT -> IO0IntStatR  >> 2) & 0x1){ //temperature sensor
//		LPC_GPIOINT -> IO0IntClr = 1<<2;
//		tempCounter++;
//	}
}
void LightIntInit (void) {
	//Interupt
	light_setRange(LIGHT_RANGE_4000);
	light_setLoThreshold(50);
	light_setIrqInCycles(LIGHT_CYCLE_1);
	light_clearIrqStatus();

	//Enable GPIO Interrupt P2.5 for light sensor
	LPC_GPIOINT->IO2IntClr = 1 << 5;
	LPC_GPIOINT->IO2IntEnF |= 1 << 5;

//	//Enable GPIO Interrupt for temperature sensor
//
// 	uint32_t PG=5, PP=0b11, SP=0b000;
//	LPC_GPIOINT->IO0IntClr = 1 << 2;
//	LPC_GPIOINT->IO0IntEnF |= 1 << 2;
// 	NVIC_SetPriorityGrouping(5);
// 	NVIC_SetPriority(EINT3_IRQn,NVIC_EncodePriority(PG,PP,SP));

	NVIC_EnableIRQ(EINT3_IRQn);
}

void setLeds (uint8_t ledMask)
{
    if ((ledMask & RGB_RED) != 0) {
        GPIO_SetValue( 2, (1<<0));
    } else {
        GPIO_ClearValue( 2, (1<<0) );
    }

    if ((ledMask & RGB_BLUE) != 0) {
        GPIO_SetValue( 0, (1<<26) );
    } else {
        GPIO_ClearValue( 0, (1<<26) );
    }
}
void rgb_warning(uint32_t temp_val) {
//	, int32_t absoluteAccReading
//	if(absoluteAccReading > 5) {
//		blue_led2 = 1;
//	}else {
//		blue_led2 = 0;
//	}
	if(temp_val > TEMP_HIGH_WARNING){
		red_led = 1;
	}
//		&& blue_led2 == 1
	if(blue_led == 1) {
		setLeds(RGB_BLUE);
	}
	else if(red_led == 1) {
		setLeds(RGB_RED);
	}
	else if(red_led == 1 && blue_led == 1) {
		setLeds(3);
	}
	else {
		setLeds(0x00);
	}
}
void rgb_blinker() {
	PRESENT_TIME = getTicks();
	if(RESET_RGB == 1 && PRESENT_TIME - START_RGB_TIME >= RGB_CLOCK) {
		RESET_RGB = 0;
		START_RGB_TIME = PRESENT_TIME;
		setLeds(0);
	}
	else if(PRESENT_TIME - START_RGB_TIME >= RGB_CLOCK) {
		rgb_warning(tempReading);
//		absoluteAccReading
		RESET_RGB = 1;
		START_RGB_TIME = PRESENT_TIME;
	}
}
void pinsel_uart3(void){
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 0;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 1;
	PINSEL_ConfigPin(&PinCfg);
}
void init_uart(void){
	UART_CFG_Type uartCfg;
	uartCfg.Baud_rate = 115200;
	uartCfg.Databits = UART_DATABIT_8;
	uartCfg.Parity = UART_PARITY_NONE;
	uartCfg.Stopbits = UART_STOPBIT_1;
	//pin select for uart3;
	pinsel_uart3();
	//supply power & setup working parameters for uart3
	UART_Init(LPC_UART3, &uartCfg);
	//enable transmit for uart3
	UART_TxCmd(LPC_UART3, ENABLE);
}
void UartDataSendAtF (void){
	if ( SevenSegValue == 15 ){

		//		if(blink_blue == 1){
		//			sprintf(uartDataForTransmission,"Movement in darkness was dectected.\r\n");
		//			UART_Send(LPC_UART3,(uint8_t *)uartDataForTransmission, strlen(uartDataForTransmission),BLOCKING);
		//		}
		//		if(blink_red == 1){
		//			sprintf(uartDataForTransmission,"Fire was Detected.\r\n");
		//			UART_Send(LPC_UART3,(uint8_t *)uartDataForTransmission, strlen(uartDataForTransmission),BLOCKING);
		//		}

		if (flagUART==1){
			sprintf(uartDataForTransmission,"%03d_-_T%2.2f_L%u_AX%d_AY%d_AZ%d \r\n",
					transmissionCounter,tempReading,lightReading,
					xPreviousReading + xoff, yPreviousReading + yoff, zPreviousReading + zoff);
			UART_Send(LPC_UART3,(uint8_t *)uartDataForTransmission, strlen(uartDataForTransmission),BLOCKING);
			transmissionCounter++;
			flagUART++;
			flagUART = 0;
		}
	}
}
void Toggle(void){

	if (((GPIO_ReadValue(1) >> 31) == 0) && msTick - previousTimeToggle >=500){
		previousTimeToggle = msTick;
		if(runningState == 0){
			runningState = 1;//enters monitor state
			sprintf(uartDataForTransmission,"Entering MONITOR Mode.\r\n");
			UART_Send(LPC_UART3,(uint8_t *)uartDataForTransmission, strlen(uartDataForTransmission),BLOCKING);
		}
		else if (runningState == 1)
			runningState = 0;//enters stable state
	}
}
void StableState(void){
	led7seg_setChar(' ',FALSE);
	oled_clearScreen(OLED_COLOR_BLACK);
	GPIO_ClearValue( 2, 1 );
	GPIO_ClearValue( 0, (1<<26) );
	blue_led = 0;
}
void MonitorState(void){
	SevenSeg();

	if ( (msTick - previousReadingTime) >= 700){
		tempReading = temp_read()/10;
		lightReading = light_read();
		acc_read ( &xPreviousReading, &yPreviousReading, &zPreviousReading);
		previousReadingTime = msTick;
	}

	xReading = xReading - xPreviousReading;
	yReading = yReading - yPreviousReading;
	zReading = zReading - zPreviousReading;

	absoluteAccReading =  xReading * xReading
			            + yReading * yReading
			            + zReading * zReading;

	xReading = xPreviousReading;
	yReading = yPreviousReading;
	zReading = zPreviousReading;

	UartDataSendAtF();
	OledDisplay(lightReading, tempReading, xReading,yReading,zReading);

	rgb_blinker();

}

int main(void){
	SysTick_Config(SystemCoreClock / 1000 ); //generates a 1 millisec clock
	init_ssp();
	init_i2c();
	init_GPIO();
	led7seg_init();
	oled_init();
	temp_init(&getTicks);
	acc_init();
	light_enable();
	init_uart();
	LightIntInit();

    acc_read(&xPreviousReading, &yPreviousReading, &zPreviousReading);
    xoff = 0-xPreviousReading;
    yoff = 0-yPreviousReading;
    zoff = 0-zPreviousReading;

	while(1){
		Toggle();

		if (runningState == 0){
			StableState();
		}
		else if (runningState == 1){
			MonitorState();
		}
	}
}


void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
}
//


